import sqlite3
from datetime import datetime

class Task:
    def _init_(self, name, priority, due_date):
        self.name = name
        self.priority = priority
        self.due_date = due_date
        self.completed = False

def create_task_table():
    # Create a SQLite database table to store tasks
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS tasks
                 (name TEXT, priority TEXT, due_date TEXT, completed INTEGER)''')
    conn.commit()
    conn.close()

def add_task(name, priority, due_date):
    # Add a task to the database
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("INSERT INTO tasks VALUES (?, ?, ?, 0)", (name, priority, due_date))
    conn.commit()
    conn.close()

def remove_task(name):
    # Remove a task from the database
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE name=?", (name,))
    conn.commit()
    conn.close()

def mark_task_completed(name):
    # Mark a task as completed in the database
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("UPDATE tasks SET completed=1 WHERE name=?", (name,))
    conn.commit()
    conn.close()

def display_tasks():
    # Display all tasks from the database
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("SELECT * FROM tasks")
    tasks = c.fetchall()
    conn.close()
    for task in tasks:
        print(task)

def main():
    create_task_table()

    while True:
        command = input("Enter command (add/remove/complete/display/exit): ").lower()

        if command == 'add':
            name = input("Enter task name: ")
            priority = input("Enter task priority (high/medium/low): ")
            due_date = input("Enter due date (YYYY-MM-DD): ")
            add_task(name, priority, due_date)

        elif command == 'remove':
            name = input("Enter task name to remove: ")
            remove_task(name)

        elif command == 'complete':
            name = input("Enter task name to mark as completed: ")
            mark_task_completed(name)

        elif command == 'display':
            display_tasks()

        elif command == 'exit':
            break

if _name_ == "_main_":
    main()
